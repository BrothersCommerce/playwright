const skus = `
3031804-3010
3031804-3551
3031804-3777
3031804-3367
3031804-6044
3031804-6008
3031804-6090
3031805-3367
3031805-6008
3031806-3342
3031806-3011
3031807-3010
3031807-3777
3031807-3367
3031807-6044
3031807-6090
3031812-3010
3031812-3551
3031817-3010
3031817-3011
3031818-3777
3031818-3367
3031725-3011
3031726-3011
3031788-3916
3031788-3010
3031788-5084
3031795-3367
3031795-3432
3031795-3463
3031795-5066
3031797-3367
3033129-3100
3033130-3100
3033135-3126
3033136-3126
3033245-3916
3031791-6044
3031791-3367
3031791-5084
3031791-3454
3031791-3432
3031791-3100
3031793-5066
3031793-3367
3031790-3001
3031790-3367
3031790-3391
3031792-3916
3031792-6044
3031815-3916
3031815-5060
3031815-6065
3031815-3006
3028175-3001
3028175-3367
3028175-3391
3033137-3001
3033137-3391
3033139-3551
3033139-3100
3033139-3391
3033140-3551
3033140-3100
3033140-3391
3033141-3100
3033142-3100
3033143-3367
3033144-3593
3033144-3001
3033145-3593
3033145-3001
3033148-3005
3033148-3391
3033149-3005
3033149-3391
3033153-3100
3033154-3100
3033155-4051
3033155-3367
3033156-4051
3033156-3367
3033206-3001
3033206-3391
3033346-3731
3033346-3065
3033347-3731
3033347-3065
3033281-3367
3033281-3001
3033310-5003
3033310-4153
3033310-6042
3033311-3010
3029354-3001
3029354-3391
3029357-3001
3029357-3010
3029357-3391
3029884-3001
3030137-3001
3030137-3391
3030138-3001
3030138-3391
3030140-3001
3030344-3001
3030345-3001
3031078-3001
3031463-3001
3031463-3391
3031464-3001
3031464-3391
3033361-3391
3033361-3937
3033362-3367
3033363-3367
3033363-6019
3033537-3367
3033537-6019
3033362-3367
3033536-3367
3033317-4372
3033317-6002
3030382-3010
3030382-3367
3033319-4372
3033319-6002
3030383-3010
3030383-3367
3031811-3916
3031811-6044
3060028-0001
3060028-0046
3033273-3022
3033273-5015
3033274-3010
3033274-3916
3033274-3001
3033563-3010
3033563-3068
3033563-3007
3033632-3018
3033632-3384
3033632-3010
3033632-3012
3033632-3231
3033632-3135
3033633-3010
3033633-3111
3033633-3727
3033672-3010
3033672-3097
3033646-3060
3033646-3005
3028616-3035
3028616-3020
3028616-3006
3029835-3095
3029835-3384
3029835-3020
3029835-3003
3029836-3384
3029836-3044
3029836-3070
3029836-3869
3029837-3035
3029839-3962
3030785-3010
3030786-0014
3030787-3068
3030787-3070
3030787-3020
3030788-3035
3030789-3068
3030790-3068
3030790-3020
3030791-3068
3030792-3068
3033504-3035
3033504-3068
3033504-6230
3033504-3020
3033505-3020
3033506-3459
3033506-6230
3033506-3086
3033506-3068
3033572-3068
3033572-3044
3033572-3005
3033400-3916
3033400-4051
3033400-3777
3033400-6008
3033400-3551
3033710-3068
30336559-6002
30335669-3367
30335669-3010
`

let pipedSkus = (skus, numberOfSkusPerChunk = 100) => {
    const chunk = (arr, size) =>
        Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>
          arr.slice(i * size, i * size + size)
    );

    const skuArray = skus.split(/\n/).map(v => v.trim()).filter(v => v.length);
    const skuChunks = chunk(skuArray, numberOfSkusPerChunk);
    let i = 1;
    for (const chunk of skuChunks) {
        const pipedSkus = chunk.reduce((prev, curr, i, array) => {if (i + 1 < array.length) { return prev += curr + "|"} else { return prev += curr }}, "" );
        console.log("");
        console.log("------------");
        console.log(`Group: ${i}`);
        console.log("------------");
        console.log(pipedSkus);
        i += 1;
    }
    console.log("");
    console.log(`Generated ${skuChunks.length} lists with a total of ${skuArray.length} SKUs`);
}

pipedSkus(skus, 200);